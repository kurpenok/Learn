# -*- coding: utf-8 -*-
"""Hackathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N1raeCwKYM95lixNbw1JvfIuV4GK3-Vk
"""

import pandas as pd

import plotly.graph_objs as go
import plotly.express as px

from sklearn.model_selection import train_test_split

from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression

from sklearn.neighbors import KNeighborsRegressor

from sklearn.ensemble import RandomForestRegressor

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

from google.colab import drive

drive.mount("/content/drive")

dataset = pd.read_csv("/content/drive/MyDrive/Hackathon.csv")
dataset.dropna()

dataset.head()

dataset["mood"].unique()

x = dataset[["pulse", "stress"]].values
y = dataset[["number_mood"]].values

RANDOM_STATE = 42

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.33,
                                                    random_state=RANDOM_STATE)

lr = LinearRegression()
lr_model = lr.fit(X_train, y_train)
lr_pred = lr_model.predict(X_test)

print("[+] Based linear regression")
print("[+] MSE: ", mean_squared_error(y_test, lr_pred))
print("[+] MAE: ", mean_absolute_error(y_test, lr_pred))

logr = LogisticRegression()
logr_model = logr.fit(X_train, y_train)
logr_pred = logr_model.predict(X_test)

print("[+] Logistic regression")
print("[+] MSE: ", mean_squared_error(y_test, logr_pred))
print("[+] MAE: ", mean_absolute_error(y_test, logr_pred))

knr = KNeighborsRegressor()
knr_model = knr.fit(X_train, y_train)
knr_pred = knr_model.predict(X_test)

print("[+] K neighbors regression")
print("[+] MSE: ", mean_squared_error(y_test, knr_pred))
print("[+] MAE: ", mean_absolute_error(y_test, knr_pred))

rfc = RandomForestRegressor()
rfc_model = rfc.fit(X_train, y_train)
rfc_pred = rfc_model.predict(X_test)

print("[+] Random forest regression")
print("[+] MSE: ", mean_squared_error(y_test, rfc_pred))
print("[+] MAE: ", mean_absolute_error(y_test, rfc_pred))